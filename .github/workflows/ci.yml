name: CI

on:
  push:
  workflow_call:

jobs:
  deno:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Reason
        run: "echo ref: ${{github.ref}} event: ${{github.event_name}}"

      - name: Build Version
        id: version
        run: |
          dotnet tool install --global minver-cli --version 5.0.0
          version=$(minver --tag-prefix v)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "### Version: $version" >> $GITHUB_STEP_SUMMARY
          sed -i -e "s/0.0.0/$version/" deno.json
          cat deno.json

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Code Style
        run: deno fmt --check

      - name: Linting
        run: deno lint

      - name: Type Check
        run: deno check scripts/*.ts *.ts src/*.ts

      - name: Tests
        run: |
          deno test --coverage=cov/
          deno coverage cov/

      - name: Publish Release Package
        if: startsWith(github.ref, 'refs/tags/v')
        run: deno publish --allow-dirty

  npm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Reason
        run: "echo ref: ${{github.ref}} event: ${{github.event_name}}"

      - name: Build Version
        id: version
        run: |
          dotnet tool install --global minver-cli --version 5.0.0
          version=$(minver --tag-prefix v)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "### Version: $version" >> $GITHUB_STEP_SUMMARY
          sed -i -e "s/0.0.0/$version/" deno.json
          cat deno.json

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Build NPM Package
        run: deno task build ${{ steps.version.outputs.version }}

      - name: Show NPM Package
        working-directory: npm
        run: cat package.json

      - name: Publish Release Package
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: Setup GitHub CI Node.js environment
        if: github.event_name != 'pull_request'
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://npm.pkg.github.com"
          scope: "@exceptionless"

      - name: Push GitHub CI Packages
        if: github.event_name != 'pull_request'
        working-directory: npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
